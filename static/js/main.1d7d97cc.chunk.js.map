{"version":3,"sources":["constants/ActionsTypes.js","reducers/sections.js","reducers/data.js","reducers/projects.js","reducers/index.js","store/configureStore.js","libs/animateNode.js","components/Loader.js","libs/morphCloud.js","libs/cloudViewer.js","components/Home.js","components/Logo.js","components/Burger.js","components/Thanks.js","components/About.js","components/Pagination.js","components/Projects.js","components/App.js","constants/Api.js","containers/AppContainer.js","actions/SectionsActions.js","actions/DataActions.js","libs/callApi.js","actions/ProjectsActions.js","index.js"],"names":["ActionsTypes","initialState","currentSection","sections","state","arguments","length","undefined","action","type","ActionTypes","Object","objectSpread","section","data","loading","active","error","payload","activeSlide","projects","project","slide","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","animate","elements","cb","notDelete","forEach","item","element","animationName","callback","node","handleAnimationEnd","classList","remove","add","addEventListener","setTimeout","animateNode","dataset","animation","_loader","MorphCloudShader","config","classCallCheck","this","onBeforeRenderConfig","shaderForMaterial","shaderMaterial","meshMaterial","shaderGeometry","shaderMesh","shaderMesh2","camera","raycaster","THREE","mouseXY","mouseLastUpdate","Date","now","mouseStandByAction","mouseStandByPosition","mouseOldestPosition","mouseHistory","mouseHistoryMax","i","push","animationFuntction","init","_this","pathCount","uniforms","eye","value","raycastPoint","raycastedPoints","sunDirection","maxDistance","pointSize","timeScaleFactor","uvScaleFactor","sizeFactor","alpha","lines","time","size","textureMatrix","vertexShader","concat","fragmentShader","MorphCloud","transparent","side","verticesForBuffer","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","vertices","Symbol","iterator","next","done","nextVert","x","y","z","err","return","resultVertices","Float32Array","addAttribute","initAnimationProperties","onBeforeRender","renderer","scene","geometry","material","group","position","clone","needsUpdate","_this2","useUpdateMouseAction","parent","dispose","setFromCamera","intersectObject","nextMouseNormal","copy","test","shift","CloudViewer","onLoad","color","initialModels","activeProject","cameraPositionZ","minimalNormalSize","sceneElement","MainScene","offsetWidth","offsetHeight","set","setColor","cameraHolder","setPixelRatio","window","devicePixelRatio","appendChild","domElement","setSize","mouseNormal","render","MeshControllers","enabled","initMouse","loadModel","initResizer","initDeviceOrientation","initialDeviceOrientationPosition","e","aspect","updateProjectionMatrix","currentMin","Math","min","setClearColor","model","_this3","clearAllMeshControllers","Promise","resolve","reject","obj_loader","OBJLoader","load","object","defaultCenter","fromArray","boundingSphere","expandByObject","getBoundingSphere","targetRadiusAspect","radius","targetCenterOffset","sub","center","traverse","nextObject","isMesh","nextGeometry","fromBufferGeometry","nextVer","multiplyScalar","DEFAULT_RADIUS_ASPECT","initShader","modelGeometry","ShadedMeshController","rotateX","PI","isMobile","deviceOrientControll","DeviceOrientationControls","defaultQ","quaternion","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","MainMesh","update","slerp","updateMouseNormal","toSinFunc","offset","sin","translateFactor","rotation","_this4","requestAnimationFrame","renderAction","_this5","document","body","mp","pageX","pageY","wp","w","h","currentMouseNormal","Home","_this$props","props","viewer","_canvas","_this$props2","setSection","react_default","a","createElement","className","style","backgroundColor","ref","id","data-animation","onClick","href","links","email","mobile","PureComponent","Logo","Burger","closed","toggle","setState","prevState","scrollTo","index","scrollToProject","setProject","projectsData","Fragment","map","key","title","Thanks","_Component","_getPrototypeOf2","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","inherits","createClass","subtitle","Component","About","_ref","text","column1","paragraphs","target","rel","cvLink","column2","Pagination","_PureComponent","pages","toConsumableArray","_","Project","openedImage","setViewer","fullpageApi","moveTo","slideChanges","isSectionActive","origin","direction","images","f","_this$props$data","description","_this$state","_element","data-slides","backgroundImage","background","setSlide","src","alt","Projects","Projects_Project","Loader","loaded","unMount","App","contentLoaded","homeLoaded","toggleLoader","open","goToSection","bind","assertThisInitialized","goToProject","unMountLoader","scroll","fetchData","setCurrentSection","destination","components_Loader","components_Logo","components_Burger","components_Pagination","react_fullpage_default","scrollOverflow","scrollHorizontally","onLeave","blockSlider","onSlideLeave","isLast","isFirst","Home_Home","home","components_Projects","components_About","about","components_Thanks","last","Api","connect","dispatch","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","fetch","callApi","then","response","ok","json","catch","console","log","sent","stop","_x","setCurrentProject","setCurrentSlide","ReactDOM","es","AppContainer","getElementById"],"mappings":"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","file":"static/js/main.1d7d97cc.chunk.js","sourcesContent":["const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST'\nconst FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCESS'\nconst FETCH_DATA_FAIL = 'FETCH_DATA_FAIL'\n\nconst SET_SECTION = 'SET_SECTION'\n\nconst SET_PROJECT = 'SET_DATA'\nconst SET_PROJECT_SLIDE = 'SET_PROJECT_SLIDE'\n\nexport default {\n  SET_SECTION,\n  SET_PROJECT,\n  FETCH_DATA_REQUEST,\n  FETCH_DATA_FAIL,\n  FETCH_DATA_SUCCESS,\n  SET_PROJECT_SLIDE\n}","import ActionTypes from '../constants/ActionsTypes'\n\nconst initialState = {\n  currentSection: 1\n}\n\nconst sections = (state = initialState, action) => {\n    switch(action.type) {\n        case ActionTypes.SET_SECTION:\n          return {\n            ...state,\n            currentSection: action.section\n          }\n          default:\n            return state\n    }\n}\n\nexport default sections","import ActionTypes from '../constants/ActionsTypes'\n\nconst initialState = {\n  data: null,\n  loading: false,\n  active: null,\n  error: null\n}\n\nconst data = (state = initialState, action) => {\n    switch(action.type) {\n      case ActionTypes.FETCH_DATA_REQUEST:\n        return {\n          ...state,\n          loading: true,\n          error: null,\n          data: null,\n        }\n      case ActionTypes.FETCH_DATA_SUCCESS: {\n        return {\n          ...state,\n          loading: false,\n          error: false,\n          data: action.payload.data\n        }\n      }\n      case ActionTypes.FETCH_DATA_FAIL:\n        return {\n          ...state,\n          loading: false,\n          error: action.payload.error,\n          data: null\n        }\n        default:\n          return state\n    }\n}\n\nexport default data","import ActionTypes from '../constants/ActionsTypes'\n\nconst initialState = {\n  active: 0,\n  activeSlide: 0\n}\n\nconst projects = (state = initialState, action) => {\n    switch(action.type) {\n        case ActionTypes.SET_PROJECT:\n          return {\n            ...state,\n            active: action.project,\n            activeSlide: 0\n          }\n\n        case ActionTypes.SET_PROJECT_SLIDE:\n          return {\n            ...state,\n            activeSlide: action.slide,\n          }\n          \n        default:\n          return state\n    }\n}\n\nexport default projects","import { combineReducers } from 'redux';\nimport sections from './sections';\nimport data from './data';\nimport projects from './projects';\n\nconst rootReducer = combineReducers({\n  sections,\n  data,\n  projects  \n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './../reducers';\nimport thunkMiddleware from 'redux-thunk';\n\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)))\n\nexport default store","export default function animateNode(element, animationName, callback, notDelete) {\n  const node = element\n  node.classList.add('animated', animationName)\n\n  function handleAnimationEnd() {\n      !notDelete && node.classList.remove('animated')\n      !notDelete && node.classList.remove(animationName)\n\n      if (typeof callback === 'function') callback()\n  }\n\n  //lol iOs :c \n  node.addEventListener('animationend', () => handleAnimationEnd(), false)\n  node.addEventListener('webkitAnimationEnd', () => handleAnimationEnd(), false)\n  node.addEventListener('webkitanimationend', () => handleAnimationEnd(), false)\n  node.addEventListener('animationend', () => handleAnimationEnd(), false)\n  node.addEventListener('animationiteration', () => setTimeout(() => handleAnimationEnd(), 500),false)\n\n}\n\nexport function animate(active, elements, cb, notDelete) {\n  if(active) \n    elements.forEach(item => {\n      if(item) animateNode(item, item.dataset.animation, cb, notDelete)\n    })\n}","import React from 'react'\nimport { animate } from '../libs/animateNode';\n\nlet _loader\n\nconst Loader = ({ loaded, unMount }) => {\n  if(loaded) animate(loaded, [_loader], () => {\n    unMount()\n  })\n  \n  return (\n    <div className='loader' ref={node => _loader = node} data-animation='fadeOut'>\n      <div></div>\n    </div>\n  )\n}\n\nexport default Loader","import * as THREE from 'three';\n\nexport function MorphCloud( config ){\n\n    const pathCount = config.pathCount;\n\n    const ShaderParams = {\n\n        uniforms: {\n            'eye': { value: new THREE.Vector3() },\n            'raycastPoint': { value: new THREE.Vector3() },\n            'raycastedPoints': { value: [ new THREE.Vector3() ] },\n            'sunDirection': { value: new THREE.Vector3() },\n            'maxDistance': { value: 4.0 },\n            'pointSize': { value: 8.0 },\n            'timeScaleFactor': { value:  0.003 },\n            'uvScaleFactor': { value:  0.003 },\n            'sizeFactor': { value:  3.2 },\n            'alpha': { value: 0.2 },\n            'lines': { value: 20.0 },\n            'time': { value: 0.0 },\n            'size': { value: 122.3 },\n            'textureMatrix': { value: new THREE.Matrix4() },\n        },\n\n        vertexShader:\n            `\n            uniform float sizeFactor;\n            uniform float uvScaleFactor;\n            uniform float timeScaleFactor;\n            uniform float pointSize;\n            \n            uniform mat4 textureMatrix;\n            uniform float maxDistance;\n            uniform float time;\n            uniform float alpha;\n            uniform vec3 eye;\n            \n            varying vec4 worldPosition;\n            \n            varying vec2 vUv;\n            varying vec4 vColor;\n            varying float distanceToMouseAlpha;\n            varying float distanceToRaycastPoint;\n            \n            float PI = 3.141592653589793;\n            \n            uniform vec3 raycastPoint;\n            uniform vec3 raycastedPoints[ ${ pathCount } ];\n            const float pathCount = ${ pathCount }.0; \n            const int pathCountInt = ${ pathCount }; \n            \n            float distanceBetweenVec3( vec3 v1, vec3 v2 ){\n                float dx = v1.x - v2.x;\n                float dy = v1.y - v2.y;\n                float dz = v1.z - v2.z;\n                float result = sqrt( dx * dx + dy * dy + dz * dz );\n                return result;\n            }\n            \n            vec3 convertToNormal( vec3 src ){\n                return vec3( ( 0.5 - src.x ) * 2.0, ( 0.5 - src.y ) * 2.0, ( 0.5 - src.z ) * 2.0 );\n            }\n            \n            float getMod( float a, float b ) {\n                float result =  a - ( b * floor( a / b ) );\n                return result;\n            }\n            \n            vec4 getMixedColor( sampler2D tex1, sampler2D tex2, vec2 _uv ){\n                    vec4 mixedColor = ( texture2D( tex1, _uv ) + texture2D( tex2, _uv ) ) * 0.5;\n                    return mixedColor;\n            }\n            \n            \n            vec3 lt_ln_to_xyz( float lt, float ln, float radius ){\n                vec3 resultXYZ = vec3(\n                    radius * cos(lt) * cos(ln),\n                    radius * cos(lt) * sin(ln),\n                    radius * sin(lt)\n                );\n                return resultXYZ;\n            }\n            \n            vec2 xyz_to_lt_ln( vec3 pos ){\n                return vec2( \n                    acos( pos.y / sqrt( pos.x * pos.x + pos.z * pos.z) ), \n                    atan( pos.x / pos.z ) \n                );\n            }\n            \n            vec3 slerp(vec3 start, vec3 end, float t) {  \n                    // Dot product - the cosine of the angle between 2 vectors.  \n                    float dot = dot(start, end);\n                    // Clamp it to be in the range of Acos() \n                    // This may be unnecessary, but floating point  \n                    // precision can be a fickle mistress.    \n                    dot = clamp(dot, -1.0, 1.0);  \n                    // Acos(dot) returns the angle between start and end,   \n                    // And multiplying that by time returns the angle between   \n                    // start and the final result.   \n                    float theta = acos(dot) * t;\n                    vec3 RelativeVec = normalize(end - start * dot); \n                    return ((start * cos(theta)) + (RelativeVec * sin(theta)));\n            }\n            \n            vec3 aproximatedRaycastedPoint(){\n            \n                vec3 finalPoint = vec3( 0.0 );\n                \n                float floatIterator = 0.0;\n                float totalMultiplyFactor = 0.0;\n                \n                for( int i = 0; i < pathCountInt; i++ ){\n                    float nextMultiplyFactor = ( floatIterator / pathCount );\n                    totalMultiplyFactor += nextMultiplyFactor;\n                    finalPoint += raycastedPoints[ i ] * nextMultiplyFactor;\n                    floatIterator += 1.0;\n                }\n                finalPoint = finalPoint / totalMultiplyFactor;\n                return finalPoint;\n            }\n            \n            vec4 getNearestRaycastedPoint( vec3 position ){\n                vec4 finalPoint = vec4( 0.0 );\n                float lastDistance = 99999999999.0;\n                for( int i = 0; i < pathCountInt; i++ ){\n                    float nextDistance = distanceBetweenVec3( position.xyz , raycastedPoints[ i ] );\n                    if( nextDistance < lastDistance ){\n                        lastDistance = nextDistance;\n                        finalPoint =  vec4( raycastedPoints[ i ], abs( sin( float( i ) / pathCount * -PI / 2.0 ) ) );\n                    }\n                }\n                return finalPoint;\n            }\n            \n            vec2 getLatLngMod( float latFactor, float lngFactor ){\n                return vec2( getMod(  latFactor,  PI * 2.0  ), -PI/ 2.0 + sin( getMod( lngFactor,  PI  ) ) * PI  );\n            }\n            \n            void main() {\n            \n            \tvUv = uv;\n            \t\n                vec3 normaledEye = normalize( eye );\n            \t\n            \tvec4 pixelPosition = modelMatrix * vec4( position, 1.0 );\n            \tvec4 mvStartPosition = pixelPosition;\n            \tworldPosition = pixelPosition;\n            \t\n            \tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n            \tvec4 tempNearest = getNearestRaycastedPoint( pixelPosition.xyz );\n            \ttempNearest.x = -50.0 + 100.0 * sin( PI/2.0  * getMod( time * timeScaleFactor, 1.0 ) );\n            \tvec4 nearestRaycasted = vec4(\n            \t    tempNearest.x - pixelPosition.y,\n            \t    pixelPosition.y,\n            \t    0.0,\n            \t    0.001\n            \t);\n            \tvec3 _raycastPoint = nearestRaycasted.xyz;\n            \tvec3 flatPixelPosition = vec3( pixelPosition.xy, 0.0 );\n            \tdistanceToRaycastPoint = distanceBetweenVec3( flatPixelPosition.xyz , _raycastPoint );\n            \n                float distanceFactor;\n                vec4 finalGlPosition;\n            \n                float distanceAlpha = 1.0 - distanceToRaycastPoint / maxDistance;\n                distanceFactor = distanceAlpha;\n                distanceToMouseAlpha = distanceAlpha;\n                float timeScaleFactorAfter = timeScaleFactor * 0.7;\n                float pixelPScaleFactor = 0.2;\n                \n                float multiplyFactorForRaycastedPath = 1.0;\n                if( distanceFactor < 0.12 ){\n                    distanceFactor = 0.12;\n                    timeScaleFactorAfter = timeScaleFactor;\n                    pixelPScaleFactor = 0.2;\n                } else {\n                    distanceFactor = 0.12 + (distanceFactor - 0.12) * 0.3;\n                    timeScaleFactorAfter = timeScaleFactor;\n                    pixelPScaleFactor = 0.3;\n                }\n                \n                vec2 currentLtLn = xyz_to_lt_ln(  vec3( 1.0, 1.0, 0.0 ) );\n                \n                float ltFactor = ( position.x + position.z );\n                float lnFactor = ( position.z - position.y );\n                \n                currentLtLn = getLatLngMod(\n                    currentLtLn.x + ltFactor * pixelPScaleFactor + ( time * timeScaleFactorAfter * 0.5 ) * PI * 2.0,\n                    currentLtLn.y + lnFactor * pixelPScaleFactor + ( time * timeScaleFactorAfter ) *  PI\n                );\n                \n                vec3 positionOfLtLn_default = lt_ln_to_xyz( \n                    currentLtLn.x, \n                    currentLtLn.y, \n                    distanceFactor * 2.5 * multiplyFactorForRaycastedPath\n                );\n                \n                vec3 positionOfLtLn_for_pointer = lt_ln_to_xyz( \n                    currentLtLn.x, currentLtLn.y, \n                    distanceFactor * 2.5 * abs( sin( time * timeScaleFactor ) )\n                );\n                \n                vec3 positionOfLtLn;\n                \n                if( distanceFactor > 0.05 ){\n                    float clipFactor = 0.0;\n                    float softFactor = 0.35;\n                    float test1 = ( distanceFactor - clipFactor ) * softFactor;\n                    float test2 = 0.0;\n                    if( test1 > 0.0 ){  test2 = sin( ( test1 ) * 2.0 * PI / 2.0 ); }\n                    positionOfLtLn = slerp( positionOfLtLn_default, positionOfLtLn_default, test2 );\n                } else {\n                    positionOfLtLn = positionOfLtLn_default;\n                }\n                \n                pixelPosition.xyz += positionOfLtLn;\n                vec4 preGlPosition =  projectionMatrix * modelViewMatrix * pixelPosition;\n                finalGlPosition = preGlPosition;\n                    \n                gl_Position =  finalGlPosition;\n                vColor = normalize( finalGlPosition );\n                \n                if ( gl_Position.w > 0.0 ) {\n                    gl_PointSize = 12.0 * pointSize / gl_Position.w + ( pointSize * distanceFactor * 0.5 );\n                    if( distanceFactor > 0.12 ){\n                        gl_PointSize = gl_PointSize + 4.0 * ( distanceFactor * 3.0 );\n                    }\n                } else {\n                    gl_PointSize = 3.0;\n                }\n                \n            }\n        `,\n\n        fragmentShader: `\n            uniform float alpha;\n            uniform float lines;\n            uniform float time;\n            uniform float size;\n            uniform vec3 eye;\n            uniform vec3 sunDirection;\n            uniform float timeScaleFactor;\n\n            varying vec4 worldPosition;\n            varying vec2 vUv;\n            varying vec4 vColor;\n            varying float distanceToMouseAlpha;\n            varying float distanceToRaycastPoint;\n            \n           \n            const float gridSize = 3.0;\n            const float pixelsPerUnit = 32.0;\n            const vec2 resolution = vec2( 1024.0, 1024.0 );\n            \n            const vec3 tinLineColor = vec3( 1.0, 1.0, 1.0 );\n            const vec3 wideLineColor = vec3( 1.0, 1.0, 0.6 );\n            \n            const float tinLineWidth = 32.0;\n            const float wideLineWidth = 12.0;\n            \n            const float tinLineOpacity = 1.0;\n            const float wideLineOpacity = 1.0;\n            \n            float PI = 3.141592653589793;\n     \n            float getTimeLineWidthScale(){\n                // return ( tinLineWidth / 2.0 ) + abs( sin( time * 0.13 ) * tinLineWidth );\n                return tinLineWidth;\n            }\n     \n            float getMod( float a, float b ) {\n                float result =  a - ( b * floor( a / b ) );\n                return result;\n            }\n            \n            bool checkIsLine(){\n            \n                // resolution in pixels\n                vec2 resInPix = vec2( resolution.x * pixelsPerUnit, resolution.y * pixelsPerUnit );\n                \n                // line alpha size\n                vec2 lineAlphaSize = vec2( getTimeLineWidthScale() / resInPix.x, getTimeLineWidthScale() / resInPix.y );\n                vec2 gridAlphaSize = vec2( 1.0 / ( resolution.x / gridSize ), 1.0 / ( resolution.y / gridSize ) );\n            \n                vec2 gridAlphaModLeft = vec2(\n                    getMod( vUv.x + ( lineAlphaSize.x * .5 ), gridAlphaSize.x ),\n                    getMod( vUv.y + ( lineAlphaSize.y * .5 ), gridAlphaSize.y )\n                );\n            \n                bool lineAvailableX = gridAlphaModLeft.x < lineAlphaSize.x;\n                // bool lineAvailableX = false;\n                bool lineAvailableY = false;\n                // bool lineAvailableY = gridAlphaModLeft.y < lineAlphaSize.y;\n            \n                return lineAvailableX || lineAvailableY || false;\n            }\n            \n            bool checkIsLine2(){\n            \n                // resolution in pixels\n                vec2 resInPix = vec2( resolution.x * pixelsPerUnit, resolution.y * pixelsPerUnit );\n                \n                // line alpha size\n                vec2 lineAlphaSize = vec2( getTimeLineWidthScale() / resInPix.x, getTimeLineWidthScale() / resInPix.y );\n                vec2 gridAlphaSize = vec2( 1.0 / ( resolution.x / gridSize ), 1.0 / ( resolution.y / gridSize ) );\n            \n                vec2 gridAlphaModLeft = vec2(\n                    getMod( vUv.x + ( lineAlphaSize.x * .5 ), gridAlphaSize.x ),\n                    getMod( vUv.y + ( lineAlphaSize.y * .5 ), gridAlphaSize.y )\n                );\n            \n                bool lineAvailableX = gridAlphaModLeft.x < lineAlphaSize.x;\n                bool lineAvailableY = gridAlphaModLeft.y < lineAlphaSize.y;\n            \n                return lineAvailableX || lineAvailableY || false;\n            }\n            \n            bool checkIsPoint(){\n            \n                // resolution in pixels\n                vec2 resInPix = vec2( resolution.x * pixelsPerUnit, resolution.y * pixelsPerUnit );\n                \n                // line alpha size\n                vec2 lineAlphaSize = vec2( getTimeLineWidthScale() / resInPix.x, getTimeLineWidthScale() / resInPix.y );\n                vec2 gridAlphaSize = vec2( 1.0 / ( resolution.x / gridSize ), 1.0 / ( resolution.y / gridSize ) );\n            \n                vec2 gridAlphaModLeft = vec2(\n                    getMod( vUv.x + ( lineAlphaSize.x * .5 ), gridAlphaSize.x ),\n                    getMod( vUv.y + ( lineAlphaSize.y * .5 ), gridAlphaSize.y )\n                );\n            \n                bool lineAvailableX = gridAlphaModLeft.x < lineAlphaSize.x;\n                bool lineAvailableY = gridAlphaModLeft.y < lineAlphaSize.y;\n            \n                return  ( lineAvailableX && lineAvailableY ) || false;\n            }\n            \n            float checkLineOpacityByX(){\n            \n                // resolution in pixels\n                vec2 resInPix = vec2( resolution.x * pixelsPerUnit, resolution.y * pixelsPerUnit );\n                \n                // line alpha size\n                vec2 lineAlphaSize = vec2( getTimeLineWidthScale() / resInPix.x, getTimeLineWidthScale() / resInPix.y );\n                vec2 gridAlphaSize = vec2( 1.0 / ( resolution.x / gridSize ), 1.0 / ( resolution.y / gridSize ) );\n            \n                vec2 gridAlphaModLeft = vec2(\n                    getMod( vUv.x + ( lineAlphaSize.x * .5 ), gridAlphaSize.x ),\n                    getMod( vUv.y + ( lineAlphaSize.y * .5 ), gridAlphaSize.y )\n                );\n                \n                float nextOpacity = sin( gridAlphaModLeft.x / lineAlphaSize.x * 3.14 );\n                return nextOpacity;\n            }\n            \n            bool checkIsCenter(){\n            \n                bool isCenterX = abs(\n                   ( vUv.x * resolution.x * pixelsPerUnit ) - ( 0.5 * resolution.x * pixelsPerUnit )\n                ) < ( wideLineWidth * .5 );\n            \n                bool isCenterY = abs(\n                    ( vUv.y * resolution.y * pixelsPerUnit ) - ( 0.5 * resolution.y * pixelsPerUnit )\n                ) < ( wideLineWidth * .5 );\n            \n                if( isCenterX ){\n                    return true;\n                } else if( isCenterY ) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n     \n            vec4 getMixedColor( sampler2D tex1, sampler2D tex2, vec2 _uv ){\n                    vec4 mixedColor = ( texture2D( tex1, _uv ) + texture2D( tex2, _uv ) ) * 0.5;\n                    return mixedColor;\n            }\n            \n            highp float distanceBetween( vec2 vector1, vec2 vector2 ){\n                float xLength = vector1.x - vector2.x;\n                float yLength = vector1.y - vector2.y;\n                return sqrt( xLength * xLength + yLength * yLength );\n            }\n            \n            float distanceToLine(vec2 p1, vec2 p2, vec2 point) {\n                float a = p1.y-p2.y;\n                float b = p2.x-p1.x;\n                return abs(a*point.x+b*point.y+p1.x*p2.y-p2.x*p1.y) / sqrt(a*a+b*b);\n            }\n            \n            float drawLine(vec2 p1, vec2 p2) {\n            \n              vec2 resolution = vec2( 1024., 1024. );\n              float Thickness = 15.0;\n              \n              vec2 uv = gl_FragCoord.xy / resolution.xy;\n            \n              float a = abs(distanceBetween(p1, uv));\n              float b = abs(distanceBetween(p2, uv));\n              float c = abs(distanceBetween(p1, p2));\n            \n              if ( a >= c || b >=  c ) return 0.0;\n            \n              float p = (a + b + c) * 0.5;\n            \n              // median to (p1, p2) vector\n              float h = 2. / c * sqrt( p * ( p - a) * ( p - b) * ( p - c));\n            \n              return mix( 1.0, .0, smoothstep( 0.5 * Thickness, 1.5 * Thickness, h ) );\n            }\n            \n            void main() {\n            \n                vec2 pc = ( gl_PointCoord - 0.5 ) * 2.0;\n                vec4 color1 = vColor;\n                \n                float r = 0.0, delta = 0.0, alpha = 1.0;\n                vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n                r = dot(cxy, cxy);\n                if ( r > 1.0 ) { discard; }\n            \n                color1.xyz = vec3( 0.7 );\n                \n                // float transparentFactor = 1. - r;\n                float transparentFactor = 1.;\n                color1.a = transparentFactor;\n                color1.xyz *= 0.9 + 0.1 * r;\n                \n                vec4 color2 = vec4( 1.0, 0.0, 0.0, 1.0 );\n                \n                if( distanceToMouseAlpha < 0.0 ){\n                    gl_FragColor = color1;\n                } else {\n                    gl_FragColor = color2;\n                }\n\n                // gl_FragColor = vec4( 1.0 ); \n            }\n        `\n\n    };\n\n    return ShaderParams;\n\n}\n\nexport default class MorphCloudShader {\n\n    constructor( config ){\n        this.config = config;\n\n        this.onBeforeRenderConfig = {};\n\n        this.shaderForMaterial = null;\n        this.shaderMaterial = null;\n        this.meshMaterial = [];\n        this.shaderGeometry = null;\n        this.shaderMesh = null;\n        this.shaderMesh2 = null;\n        this.camera = null;\n        this.raycaster = new THREE.Raycaster();\n        this.mouseXY = new THREE.Vector2();\n\n        this.mouseLastUpdate = Date.now();\n        this.mouseStandByAction = false;\n        this.mouseStandByPosition = false;\n\n        this.mouseOldestPosition = new THREE.Vector2();\n        this.mouseHistory = [];\n        this.mouseHistoryMax = 12;\n        for( let i = 0; i < this.mouseHistoryMax; i++ ){ this.mouseHistory.push( new THREE.Vector2() ) }\n\n        this.animationFuntction = () => {};\n\n        this.init();\n    }\n\n    init(){\n\n        this.shaderForMaterial = MorphCloud( {\n            pathCount: this.config.pathCount\n        } );\n        // this.shaderForMaterial2 = MorphCloudLines( {\n        //     pathCount: this.config.pathCount\n        // } );\n\n        this.shaderForMaterial.uniforms.lines.value = 3;\n        this.shaderForMaterial.uniforms.time.value = 0;\n        this.shaderForMaterial.uniforms.timeScaleFactor.value = 0.003;\n\n        let raycastedPoints = [];\n        for( let i = 0; i < this.config.pathCount; i++  ){ raycastedPoints.push( new THREE.Vector3() ); }\n        this.shaderForMaterial.uniforms.raycastedPoints.value = raycastedPoints;\n\n        this.shaderMaterial = new THREE.ShaderMaterial( {\n            uniforms: this.shaderForMaterial.uniforms,\n            vertexShader: this.shaderForMaterial.vertexShader,\n            fragmentShader: this.shaderForMaterial.fragmentShader,\n            transparent: true,\n            side: THREE.BackSide\n        } );\n        // this.shaderMaterial2 = new THREE.ShaderMaterial( {\n        //     uniforms: this.shaderForMaterial2.uniforms,\n        //     vertexShader: this.shaderForMaterial2.vertexShader,\n        //     fragmentShader: this.shaderForMaterial2.fragmentShader,\n        //     transparent: true,\n        //     wireframe: true,\n        //     side: THREE.DoubleSide\n        // } );\n\n        this.shaderGeometry = new THREE.BufferGeometry();\n\n        const verticesForBuffer = [];\n        for ( const nextVert of this.config.vertices ) {\n            verticesForBuffer.push( nextVert.x );\n            verticesForBuffer.push( nextVert.y );\n            verticesForBuffer.push( nextVert.z );\n        }\n        const resultVertices = new Float32Array( verticesForBuffer );\n        this.shaderGeometry.addAttribute( 'position', new THREE.BufferAttribute( resultVertices, 3 ) );\n\n\n        this.shaderMesh = new THREE.Points( this.shaderGeometry,  this.shaderMaterial );\n        // this.shaderMesh2 = new THREE.Mesh( this.shaderGeometry,  this.shaderMaterial2 );\n        // this.shaderMesh.add( this.shaderMesh2 );\n\n        this.initAnimationProperties();\n\n        this.shaderMesh.onBeforeRender = ( renderer, scene, camera, geometry, material, group ) => {\n            if( this.config.onBeforeRender ){\n                this.config.onBeforeRender( renderer, scene, camera, geometry, material, group );\n            }\n            this.onBeforeRenderConfig = { renderer, scene, camera, geometry, material, group };\n\n        }\n\n    }\n\n    animate(){\n        if( this.onBeforeRenderConfig.camera ){\n\n\n            this.camera = this.onBeforeRenderConfig.camera;\n            this.animationFuntction();\n            this.shaderMaterial.uniforms[ 'eye' ].value = this.camera.position.clone();\n            this.shaderMaterial.uniforms[ 'time' ].value += 1;\n            // this.shaderMaterial2.uniforms[ 'eye' ].value = this.camera.position.clone();\n            // this.shaderMaterial2.uniforms[ 'time' ].value += 1;\n            this.shaderMaterial.needsUpdate = true;\n        }\n    }\n\n    initAnimationProperties(){\n\n        let raycastedPoints = [];\n        for( let i = 0; i < this.config.pathCount; i++  ){ raycastedPoints.push( new THREE.Vector3() ); }\n        this.shaderMaterial.uniforms[ 'raycastedPoints' ].value = raycastedPoints;\n\n        this.animationFuntction = () => {\n\n            if( Date.now() > this.mouseLastUpdate + 3300 ){ this.mouseStandByAction = true; }\n\n            if( this.mouseStandByAction ){\n                this.mouseStandByPosition = this.mouseStandByPosition + 1 < this.mouseHistoryMax ? this.mouseStandByPosition + 1 : 0;\n                this.useUpdateMouseAction( this.mouseHistory[ this.mouseStandByPosition ] );\n            }\n\n        };\n\n    }\n\n    remove(){\n        this.shaderMesh.parent.remove( this.shaderMesh );\n        this.shaderMesh.geometry.dispose();\n        this.shaderMesh.material.dispose();\n        this.shaderMaterial.dispose();\n        this.shaderGeometry.dispose();\n        this.shaderMaterial = null;\n        this.shaderGeometry = null;\n    }\n\n    raycastModel(){\n        this.raycaster.setFromCamera( this.mouseXY, this.camera );\n        return this.raycaster.intersectObject( this.shaderMesh );\n    }\n\n    useUpdateMouseAction( nextMouseNormal ){\n        this.mouseXY.copy( nextMouseNormal );\n    }\n\n    updateMouseNormal( nextMouseNormal ){\n\n        this.mouseLastUpdate = Date.now();\n        this.mouseStandByAction = false;\n        this.mouseStandByPosition = 0;\n\n        this.mouseHistory.push( nextMouseNormal.clone() );\n\n        if( this.mouseHistory.length > this.mouseHistoryMax ){\n            let test = this.mouseHistory.shift();\n            this.mouseOldestPosition.copy( test );\n        }\n\n        this.useUpdateMouseAction( nextMouseNormal );\n    }\n\n}\n\n","import * as THREE from 'three';\n// import OrbitControlls from 'three-orbitcontrols';\nimport { OBJLoader } from 'three-obj-mtl-loader';\nimport MorphCloudShader from './morphCloud';\nimport DeviceOrientationControls from 'three-device-orientation'; \nimport isMobile from 'is-mobile'\n\n\nexport default class CloudViewer {\n  constructor(element, onLoad, color, initialModels, activeProject, cameraPositionZ = 30) {\n    this.cameraPositionZ = cameraPositionZ;\n    this.minimalNormalSize = 400;\n    this.initialModels = initialModels;\n    this.sceneElement = element;\n    this.onLoad = onLoad;\n    this.activeProject = activeProject;\n    \n    this.MainScene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(60, this.sceneElement.offsetWidth / this.sceneElement.offsetHeight , 0.1, 1000 );\n    \n    this.renderer = new THREE.WebGLRenderer({ alpha: !color });\n    this.camera.position.set(0, 0, cameraPositionZ);\n\n    if ( color ) {\n      this.setColor(color);\n    }\n\n    this.cameraHolder = new THREE.Object3D();\n    this.cameraHolder.add( this.camera );\n\n    this.renderer.setPixelRatio( window.devicePixelRatio );\n\n    this.sceneElement.appendChild(this.renderer.domElement);\n    this.renderer.setSize(this.sceneElement.offsetWidth, this.sceneElement.offsetHeight);    \n\n    this.mouseNormal = new THREE.Vector2();\n\n    this.render();\n\n    this.MainScene.add(this.cameraHolder);\n\n    this.MeshControllers = [];\n\n    this.enabled = true;\n\n    this.initMouse();\n    this.loadModel(this.initialModels[0], onLoad);\n    this.initResizer();\n    this.initDeviceOrientation();\n    \n    this.initialDeviceOrientationPosition = null\n  }\n  \n  initDeviceOrientation() {\n    window.addEventListener('deviceorientation', (e) => {\n      if(!this.initialDeviceOrientationPosition) {\n        this.initialDeviceOrientationPosition = e        \n      }\n\n      // console.log(\"TCL: CloudViewer -> initDeviceOrientation -> this.MeshControllers[0].rotate.x\", this.MeshControllers[0].shaderMesh)\n    })\n  }\n\n  initResizer(){\n\n    window.addEventListener( 'resize', ()  => {\n      setTimeout(() => {\n        this.renderer.setSize(this.sceneElement.offsetWidth, this.sceneElement.offsetHeight );\n        this.camera.aspect = this.sceneElement.offsetWidth / this.sceneElement.offsetHeight;\n        this.camera.updateProjectionMatrix();\n        \n        const currentMin = Math.min(this.sceneElement.offsetWidth, this.sceneElement.offsetHeight);\n         \n        if (currentMin < this.minimalNormalSize) {\n          this.camera.position.z = this.cameraPositionZ + this.cameraPositionZ * (1 - currentMin / this.minimalNormalSize); \n        }\n        \n      }, 50)\n    });\n\n  }\n\n  setColor(color) {\n    this.renderer.setClearColor( color );\n  }\n\n  loadModel(model, onLoad) {\n    this.clearAllMeshControllers()\n    return new Promise((resolve, reject) => {\n      this.obj_loader = new OBJLoader();\n        this.obj_loader.load( model, ( object ) => {\n          let vertices = [];\n\n          const DEFAULT_RADIUS_ASPECT = 22.465094820192128;\n          const defaultCenter = new THREE.Vector3().fromArray(  [ 0, 0, 0 ] );\n          const boundingSphere = new THREE.Box3().expandByObject( object ).getBoundingSphere( new THREE.Sphere() );\n\n          const targetRadiusAspect = DEFAULT_RADIUS_ASPECT / boundingSphere.radius;\n          const targetCenterOffset = defaultCenter.sub( boundingSphere.center );\n\n          object.traverse( ( nextObject ) => {\n            if ( nextObject.isMesh ) {\n              if ( nextObject.geometry ) {\n                if ( nextObject.geometry.type === 'BufferGeometry' ) {\n                  let nextGeometry = new THREE.Geometry().fromBufferGeometry( nextObject.geometry );\n                  vertices = vertices.concat( nextGeometry.vertices );\n                }\n              }\n            }\n          });\n          for (const nextVer of vertices) {\n            nextVer.multiplyScalar( targetRadiusAspect );\n            nextVer.add( targetCenterOffset );\n            nextVer.y += DEFAULT_RADIUS_ASPECT/2;\n          }\n          this.initShader( vertices, onLoad );\n          \n          resolve( vertices );\n        });\n      }\n    )\n  }\n  \n  initShader( model, onLoad ) {\n    this.modelGeometry = model;\n    \n    const ShadedMeshController = new MorphCloudShader({\n      pathCount: 1,\n      vertices: this.modelGeometry\n    });\n\n    ShadedMeshController.shaderGeometry.rotateX( -Math.PI / 2);\n\n    this.MainScene.add( ShadedMeshController.shaderMesh );\n\n    if(isMobile()) ShadedMeshController.deviceOrientControll = new DeviceOrientationControls(new THREE.Object3D());\n    ShadedMeshController.defaultQ = ShadedMeshController.shaderMesh.quaternion.clone();\n    \n    this.MeshControllers.push( ShadedMeshController );\n\n    setTimeout(() => onLoad(true), 1000);\n  }\n\n  clearAllMeshControllers(){\n    for( const nextController of this.MeshControllers ){\n      nextController.remove();\n    }\n    this.MeshControllers = [];\n    this.modelGeometry = [];\n  }\n\n  renderAction() {\n\n    this.renderer.render( this.MainScene, this.camera );\n\n    for( const MainMesh of this.MeshControllers ) {\n        if(MainMesh.deviceOrientControll) {\n          MainMesh.deviceOrientControll.update();\n          MainMesh.shaderMesh.quaternion.copy(MainMesh.defaultQ.clone().slerp(MainMesh.deviceOrientControll.object.quaternion.clone(), 0.15 )) \n\n        }\n        \n\n        MainMesh.updateMouseNormal( this.mouseNormal );\n        MainMesh.animate();\n        const toSinFunc = ( alpha, offset ) => Math.sin( Math.PI / 2 * ( alpha + offset ) )\n        const translateFactor = Math.PI / 2;\n        this.cameraHolder.rotation.x = -0.2 + toSinFunc( MainMesh.mouseOldestPosition.y, 0 ) * translateFactor * 0.05;\n        this.cameraHolder.rotation.y = -toSinFunc( MainMesh.mouseOldestPosition.x, 0 ) * translateFactor * 0.1;\n    }\n  }\n\n  render() {\n    requestAnimationFrame(() => this.render());\n    if( this.enabled ) this.renderAction(); \n  }\n\n  initMouse() {\n    if(!isMobile()) {\n      document.body.addEventListener('mousemove', (e) => {\n        if( this.enabled ){\n          const mp = { x: e.pageX, y: e.pageY };\n          const wp = { w: this.sceneElement.offsetWidth, h: this.sceneElement.offsetHeight };\n          const currentMouseNormal = new THREE.Vector2( -1.0 + ( mp.x / wp.w * 2.0  ), 1.0 - ( mp.y / wp.h * 2.0 ) );\n            \n          this.mouseNormal.copy( currentMouseNormal );\n        }\n      });\n    }\n  }\n}\n","import React, { PureComponent } from 'react'\nimport { animate } from './../libs/animateNode'\nimport CloudViewer from '../libs/cloudViewer';\n\nexport default class Home extends PureComponent {\n  \n  elements = []\n\n  componentDidMount() {\n    const { data, onLoad } = this.props\n    \n    this.viewer = new CloudViewer(this._canvas, () => onLoad(true), null, [data.model])\n  }\n  \n  render() {\n    const { data, active, setSection } = this.props\n    animate(active, this.elements)\n\n    if (this.viewer) {\n      if (!active) {\n        this.viewer.enabled = false\n      } else {\n        this.viewer.enabled = true\n      }\n    }\n\n    return (\n      <div className='home fp-noscroll section'>\n        <div style={{ backgroundColor: data.color }} ref={node => this._canvas = node} id='homescene' className='scene'> </div>\n        <div ref={node => this.elements.push(node)} data-animation='fadeInRight' className='title'>\n          <div>\n            My name is <span onClick={() =>  setSection(3)}>Kuba</span>, <br/>I do cool sh*t & <br/> this is my <span onClick={() => setSection(2)}> book </span>\n          </div>\n        </div>\n        <div className='contacts'>\n          <div className='wrapper'>\n            <div className='email'>\n              <a className='fadeInUp' data-animation='fadeInUp' ref={node => this.elements.push(node)} href={`mailto:${data.links.email}`}> {data.links.email} </a>\n            </div>\n            <div className='phone'>\n              <a className='fadeInUp' data-animation='fadeInUp' ref={node => this.elements.push(node)}  href={`tel${data.links.mobile}`}> {data.links.mobile} </a>\n            </div>\n          </div>\n\n        </div>\n\n      </div>  \n    )\n  }\n}\n","import React from 'react'\nimport isMobile from 'is-mobile'\n\nconst Logo = () => {\n  return (\n    <div className={`${isMobile() ? 'mobile' : ''} animated fadeInLeft logo`}>\n      \n    </div>\n  )\n}\n\nexport default Logo","import React, { PureComponent } from 'react'\nimport isMobile from 'is-mobile'\n\nclass Burger extends PureComponent {\n  state = {\n    closed: true\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      closed: !prevState.closed\n    }))\n  }\n\n  scrollTo = index => {\n    this.toggle()\n    this.props.onClick(index)\n  }\n\n  scrollToProject = (project) => {\n    this.toggle()\n    this.props.onClick(project + 2)\n    this.props.setProject(project)\n  }\n  \n  render() {\n    const { closed } = this.state\n    const { scrollTo, toggle, scrollToProject } = this\n    const { active, projectsData } = this.props\n\n    return (\n      <>\n        <div className={`navbar ${closed ? 'closed' : ''}`}> \n          <div className={`${isMobile() ? 'mobile' : ''} navbar-logo`}> </div>\n          <div className='menu'> \n            <div className={`item ${active === 1 ? 'active' : '' }`} onClick={() => scrollTo(1)}> Start </div>\n            {\n              projectsData.map((item, i) => (\n                <div key={i} onClick={() => scrollToProject(i)} className={`item ${active === i + 2 ? 'active' : ''}`}> {item.title} </div>\n              ))\n            }\n            <div className={`item ${active === projectsData.length + 2 ? 'active' : ''}`} onClick={() => scrollTo(projectsData.length + 2)}> About me </div>\n          </div>\n        </div>\n          \n        <div onClick={toggle} className={`burger animated fadeInRight ${closed ? '' : 'active' }`}>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default Burger\n","import React, { Component } from 'react'\nimport { animate } from '../libs/animateNode';\n\nexport class Thanks extends Component {\n  elements = []\n\n  render() {\n    const { data, active } = this.props\n    animate(active, this.elements)\n    \n    return (\n      <div className='thanks fp-noscroll section'>\n          <div className='title' ref={node => this.elements.push(node)} data-animation='fadeInRight'> {data.title} </div> \n          <div className='email' ref={node => this.elements.push(node)} data-animation='fadeInLeft'>\n            <a href={`mailto:${data.links.email} `}> {data.links.email} </a>\n          </div>\n          <div className='phone' ref={node => this.elements.push(node)} data-animation='fadeInRight'>\n            <a href={`tel:${data.links.mobile} `}> {data.links.mobile} </a>\n          </div>\n\n        <div className='footer'>\n          <div className='subtitle' ref={node => this.elements.push(node)} data-animation='flipInX'> {data.subtitle} </div>\n          <div className='contacts'>\n            <div className='back' ref={node => this.elements.push(node)} data-animation='fadeInUp' onClick={() => this.props.onClick()}> go back up </div>\n            </div>\n        </div>\n      </div>      \n    )\n  }\n}\n\nexport default Thanks\n","import React from 'react'\nimport { animate } from '../libs/animateNode';\n\nconst elements = []\n\nconst About = ({ data, active }) => {\n  animate(active, elements)\n  \n  return (\n    <div className='about section'>\n      <div className='wrapper'> \n        <div className='title' data-animation='fadeInRight' ref={node => elements.push(node)}> {data.title} </div>\n        <div className='subtitle' data-animation='fadeInRight'  ref={node => elements.push(node)}> {data.subtitle} </div>\n        <div className='description'> \n          <div className='item'>\n            <div className='description-title' data-animation='fadeInRight' ref={node => elements.push(node)}> {data.text.column1.title} </div>\n            <div className='text' data-animation='fadeInRight' ref={node => elements.push(node)}> \n              {\n                data.text.column1.paragraphs.map((item, key) => (\n                  <div key={key}> {item} </div>\n                ))\n              }\n            </div>\n            <div className='button mdn' data-animation='fadeInRight' ref={node => elements.push(node)}>\n              <a target='_blank' rel='noopener noreferrer' href={data.cvLink}> Download full cv (pdf) </a>\n            </div>\n          </div>\n          <div className='item' >\n            <div className='description-title' data-animation='fadeInRight' ref={node => elements.push(node)}> {data.text.column2.title} </div>\n            <div className='text' data-animation='fadeInRight' ref={node => elements.push(node)}> \n              {\n                data.text.column2.paragraphs.map((item, key) => (\n                  <div key={key}> {item} </div>\n                ))\n              }\n              <div className='button mdb' data-animation='fadeInRight' ref={node => elements.push(node)}>\n                <a target='_blank' rel='noopener noreferrer' href={data.cvLink}> Download full cv (pdf) </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default About\n","import React, { PureComponent } from 'react'\n\nexport class Pagination extends PureComponent {\n  render() {\n    const { pages } = this.props\n    return (\n      <div className='pagination'>\n        {\n          [...Array(pages)].map((_, i) =>  (\n            <div className={`item ${this.props.active === i + 1 ? 'active' : '' }`} key={i} onClick={() => this.props.onClick(i + 1)}> </div>\n          ))\n        } \n      </div>\n    )\n  }\n}\n\nexport default Pagination\n","import React, { Component } from 'react'\nimport CloudViewer from './../libs/cloudViewer.js'\n\nclass Project extends Component {\n  state = {\n    openedImage: null,\n    activeSlide: 0,\n  }\n\n  componentDidMount() {\n    this.setViewer()\n  }\n\n  setSlide(activeSlide) {\n    this.props.fullpageApi.moveTo(this.props.section + 1, activeSlide)\n    this.setState({ activeSlide })\n  }\n\n  componentDidUpdate() {\n    const { data, slideChanges, section, isSectionActive} = this.props\n    const { activeSlide } = this.state\n    const isActiveProject = slideChanges ? section === slideChanges.origin.index : false\n\n    if(isActiveProject && activeSlide !== slideChanges.direction.index) {\n      this.setState({ activeSlide: slideChanges.direction.index })\n    }\n\n    const isImage = data.images[activeSlide - 1]\n    \n    if(!isImage & this.state.openedImage) {\n      this.setState({ openedImage: false })\n    }\n\n    if (isSectionActive && activeSlide === 0 && this.viewer) {\n      if (this.viewer) this.viewer.enabled = true\n    } else {     \n      if (this.viewer) this.viewer.enabled = false\n    }\n  }\n\n  setViewer() {\n    const { data, active } = this.props\n\n    setTimeout(() => {\n      this.viewer = new CloudViewer(this._canvas, f=>f, data['fist-slide-color'], [data.model], active)\n    }, 0)\n  }\n\n  render() {\n    const { data } = this.props\n    const { images, title, description } = this.props.data\n    const { activeSlide, openedImage } = this.state\n    \n    return (\n      <div className={`section fp-noscroll projects`} ref={node => this._element = node} data-slides={`${activeSlide === 0 ? 'first' : ''}${activeSlide === images.length + 1 ? 'last' : ''}`} >\n        <div className='slide fp-noscroll'>\n          <div className='first-slide'>\n            <div className='main-title'> {data.title} </div>\n            <div ref={node => this._canvas = node} className='project-scene'> </div>\n          </div>\n        </div>\n        \n        {images.map((item, i) =>\n          <div key={i} className='slide fp-noscroll'> \n            <div className='image-slide' style={{ backgroundImage: `url(${item})` }}>\n            </div>\n          </div>)\n        }\n\n        <div className='slide descr-wrapper fp-noscroll' style={{background: data['last-slide-color']}}>\n          <div className='descr-slide' >\n            <div className='title' data-animation='projectsTitle'> {title} </div>\n            <div className='descr'>\n              {description}\n            </div>\n          </div>\n        </div>\n        \n        <div className='pagination-list'>\n          {[...images, ')', ')'].map((_, i) => \n            <div key={i} onClick={() => this.setSlide(i)} className={`item ${activeSlide === i ? 'active' : '' }`}>\n              <div/>\n            </div>\n          )}\n        </div>\n\n        {activeSlide !== 0 && activeSlide !== images.length + 1 ? \n          <div className='fit-image' onClick={() => this.setState({ openedImage: true })}></div>\n          : ''\n        }\n\n        {openedImage ? \n          <div className='image-popup'>\n            <div className='image-popup-close' onClick={() => this.setState({ openedImage: false })}> \n              <div></div>\n              <div></div>\n            </div>\n            <img src={images[activeSlide - 1]} alt='project img'/>\n          </div> : ''\n        }\n\n      </div>\n\n    )\n  }\n}\n\nconst Projects = ({ data, onLoad, fullpageApi, slideChanges, active }) => (\n  <>\n    {data.map((project, i) => (\n      <Project onLoad={onLoad} data={project} slideChanges={slideChanges} isSectionActive={active === i + 2} fullpageApi={fullpageApi} key={i} section={i + 1}/>\n    ))}\n  </>\n)\n\nexport default Projects\n","import React, { PureComponent } from 'react'\nimport ReactFullpage from '@fullpage/react-fullpage';\nimport 'fullpage.js/vendors/scrolloverflow'\nimport 'fullpage.js/dist/fullpage.extensions.min.js'\n\nimport Home from './Home';\nimport Logo from './Logo';\nimport Burger from './Burger';\nimport Thanks from './Thanks';\nimport About from './About';\nimport Pagination from './Pagination';\nimport Projects from './Projects';\nimport Loader from './Loader';\n\nexport class App extends PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.goToSection = this.goToSection.bind(this)\n    this.goToProject = this.goToProject.bind(this)\n    this.unMountLoader = this.unMountLoader.bind(this)\n    this.scroll = this.scroll.bind(this)\n    this.fullpageApi = null\n  }\n\n  state = {\n    contentLoaded: false,\n    homeLoaded: false,\n  }\n  \n  componentDidMount() {\n    this.props.fetchData()\n  }\n  \n  goToSection(i) {\n    this.props.setCurrentSection(i)\n    this.fullpageApi.moveTo(i)\n  } \n\n  goToProject(i) {\n    this.props.setProject(i)\n  }\n\n  unMountLoader() {\n    this.setState({ contentLoaded: true })\n  }\n\n  scroll(destination) {\n    this.props.setCurrentSection(destination.index + 1)\n  }\n\n  toggleLoader = (open = true) => {\n    this.setState({ homeLoaded: open })\n  }  \n\n  render() {\n    const { sections, setProject, data, projects } = this.props\n    const { goToSection } = this\n    const { contentLoaded, homeLoaded } = this.state\n    if(data && (data.title !== document.title)) document.title = data.title\n\n    return ( \n      <>\n        { homeLoaded && contentLoaded ? '' : <Loader loaded={(!!data && homeLoaded)} unMount={this.unMountLoader}/> }\n        { data ? \n            <>\n              <Logo/>\n              <Burger setProject={this.goToProject} projectsData={data.projects} projects={projects} onClick={this.goToSection} active={sections.currentSection}/>\n              <Pagination pages={data.projects.length + 3} onClick={i => this.goToSection(i)} active={sections.currentSection}/>\n              <ReactFullpage\n                scrollOverflow={true}\n                scrollHorizontally={true}\n                onLeave={(origin, destination) => {\n                  this.scroll(destination)\n                  this.setState({ blockSlider: false })\n                }}  \n                onSlideLeave={(origin, destination, direction) => {\n                  if((destination.isLast && direction.isFirst) || (destination.isFirst && direction.isLast)) {\n                    return false \n                  } \n\n                  this.slideChanges = {origin, destination, direction}\n                }}  \n                render={\n                  ({ fullpageApi }) => {\n                    if(fullpageApi) this.fullpageApi = fullpageApi\n                    return (\n                      <div>\n                        <Home data={data.home} setSection={goToSection} onLoad={this.toggleLoader} active={sections.currentSection === 1}/>\n                        <Projects data={data.projects} fullpageApi={fullpageApi} slideChanges={this.slideChanges} onLoad={this.toggleLoader} isSectionActive={sections.currentSection === 2} active={sections.currentSection } setProject={setProject} />\n                        <About data={data.about} active={sections.currentSection === 3}/>\n                        <Thanks data={data.last} onClick={(i) => goToSection(i)} active={sections.currentSection === 4}/>\n                      </div>\n                    )\n                  }\n                }\n              /> \n            </> \n          : '' }\n      </>\n    )\n  }\n}\n\nexport default App\n"," const API_URL = './data.json'\n \n export default {\n  API_URL\n }\n","import { connect } from 'react-redux'\n\nimport App from '../components/App'\nimport { setCurrentSection } from '../actions/SectionsActions';\nimport { fetchData } from '../actions/DataActions';\nimport { setCurrentProject, setCurrentSlide } from '../actions/ProjectsActions';\n\nexport default connect(\n  state => \n    ({\n      sections: state.sections,\n      data: state.data.data,\n      projects: state.projects\n    }),\n  dispatch => \n    ({\n      setCurrentSection(section) {\n        dispatch(setCurrentSection(section))\n      },\n      fetchData() {\n        dispatch(fetchData())\n      },\n      setProject(project) {\n        dispatch(setCurrentProject(project))\n      },\n      setCurrentSlide(slide, project) {\n        dispatch(setCurrentSlide(slide, project))\n      }\n\n    })\n)(App)\n","import ActionTypes from './../constants/ActionsTypes'\n\nconst setCurrentSection = section => \n  ({\n    type: ActionTypes.SET_SECTION,\n    section\n  })\n\nexport {\n  setCurrentSection,\n}","import ActionTypes from './../constants/ActionsTypes'\nimport { callApi } from '../libs/callApi';\nimport Api from './../constants/Api'\n\nconst fetchDataFail = error => \n  ({\n    type: ActionTypes.FETCH_DATA_FAIL,\n    payload: { error }\n  })\n\nconst fetchDataRequest = () => \n  ({\n    type: ActionTypes.FETCH_DATA_REQUEST\n  })\n\nconst fetchDataSucess = data => \n  ({\n    type: ActionTypes.FETCH_DATA_SUCCESS,\n    payload: { data }\n  })\n\nconst fetchData = () => async dispatch => {\n  dispatch(fetchDataRequest())\n  const res = await callApi(Api.API_URL)\n\n  res.json ? \n    dispatch(fetchDataSucess(res.json))\n    :\n    dispatch(fetchDataFail(res.error))\n}\n\nexport {\n  fetchData\n}","const callApi = (url, options) =>\n  fetch(url, options)\n    .then(\n      response => (response.ok\n        ? response.json()\n        : Promise.reject(response.text())\n      ),\n      error => Promise.reject(error))\n    .then(\n      json => ({ json }),\n      error => ({ error })\n    )\n    .catch(error => console.log({ error }))\n\nexport {\n  callApi\n}","import ActionTypes from './../constants/ActionsTypes'\n\nconst setCurrentProject = project => \n  ({\n    type: ActionTypes.SET_PROJECT,\n    project\n  })\n\nconst setCurrentSlide = (slide, project) => \n  ({\n    type: ActionTypes.SET_PROJECT_SLIDE,\n    project,\n    slide\n  })\n\nexport {\n  setCurrentProject,\n  setCurrentSlide\n}","import './style/main.sass'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux';\nimport store from './store/configureStore';\nimport AppContainer from './containers/AppContainer';\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppContainer />\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}